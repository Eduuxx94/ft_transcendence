// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
	id						Int @id @unique
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt

	email					String @unique
	hash					String

    // UserProfile
	name					String
	nickname				String @unique
	image					String?
    level                   Int @default(1)
    xp                      Int @default(0)
    money                   Int @default(0)
    color                   String // this sets the color for player name, player ball and player padel

    tableColorEquipped      String?
    tableSkinEquipped       String?
    paddleSkinEquipped      String?
    tableSkinsOwned         String[]
    paddleSkinsOwned        String[]
    // gameHistory          Games[]

	status					UserStatus @default(OFFLINE) // Offline, In Game, Online

    // Friends
	sentFriendRequests		FriendRequest[] @relation("FriendShipRequestor")
	receivedFriendRequests	FriendRequest[] @relation("FriendShipRequestee")
	friends					User[] @relation("Friends")
	friendsOf				User[] @relation("Friends")

    // Blocked Users
    blockedUsers  Blocklist[] @relation("BlockingUsers")
    blockingUsers Blocklist[] @relation("BlockedUsers")

    // Chat
    messages                Message[]
    channels                ChannelUser[]
    ownedChannels           Channel[] @relation("ChannelOwner")
	@@unique([id, nickname])
	@@map("users")
}

model FriendRequest {
	id						Int @unique @default(autoincrement())
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt

	requestorId				Int
	requestorName			String
	requesteeId				Int
	requesteeName			String
	status					FriendReqStatus @default(PENDING) // Pending, Accepted, Rejected, Blocked

	requestor				User @relation(fields: [requestorId, requestorName], references: [id, nickname], name: "FriendShipRequestor")
	requestee				User @relation(fields: [requesteeId, requesteeName], references: [id, nickname], name: "FriendShipRequestee")

	@@id([requestorId, requesteeId])
	@@index([requestorId, requesteeId], name: "friendship_index")
	@@map("friend_requests")
}

model Blocklist {
    id           Int @default(autoincrement())
    blockerId    Int
    blocker      User @relation("BlockingUsers", fields: [blockerId], references: [id])
    blockedId    Int
    blocked      User @relation("BlockedUsers", fields: [blockedId], references: [id])
    createdAt    DateTime @default(now())
    @@id([blockerId, blockedId])
}

model Message {
    id                      Int @id @default(autoincrement())
    content                 String
    userId                  Int
    user                    User @relation(fields: [userId], references: [id])
    channelId               Int
    channel                 Channel @relation(fields: [channelId], references: [id])
    createdAt               DateTime @default(now())
}

model Channel {
    id                      Int @id @default(autoincrement())
    name                    String? @unique
    hash                    String?
    messages                Message[]
    users                   ChannelUser[]
    ownerId                 Int?
    owner                   User? @relation("ChannelOwner", fields: [ownerId], references: [id])
	type					ChannelType // Public, Private, Protected, DM
}

model ChannelUser {
    userId                  Int
    user                    User @relation(fields: [userId], references: [id])
    channelId               Int
    channel                 Channel @relation(fields: [channelId], references: [id])
    isMuted                 Boolean @default(false)
    isAdmin                 Boolean @default(false)
    @@id([userId, channelId])
}

enum FriendReqStatus {
	PENDING
	ACCEPTED
	REJECTED
	BLOCKED
	CANCELLED
}

enum UserStatus {
	OFFLINE
	IN_GAME
	ONLINE
}

enum ChannelType {
	PUBLIC
    PRIVATE
    PROTECTED
    DM
}
